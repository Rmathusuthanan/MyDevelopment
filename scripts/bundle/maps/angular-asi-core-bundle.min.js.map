{"version":3,"sources":["app/core/core.angularGlobals.ts","app/core/app.module.ts","app/core/core.module.ts","app/core/core.constants.ts","app/core/core.routing.stateService.ts","app/core/core.Services.iPartSettingsService.ts"],"names":["app","core","AngularGlobals","appCore","appCoreConstants","$HTTP","$STATEPARAMS","$STATEPROVIDER","$INJECTOR","convertDateStringsToDates","input","key","hasOwnProperty","match","value","regexIso8601","milliseconds","Date","parse","isNaN","angular","module","config","$httpProvider","defaults","transformResponse","push","responseData","element","document","ready","bootstrap","data","querySelector","val","context","fromJson","authToken","constant","routing","StateService","$injector","this","prototype","go","to","params","state","get","injection","i","id","factory","Services","IPartSettingsService","$http","clientContext","baseUrl","getSettings","contentKey","contentItemKey","headers","RequestVerificationToken","then","response","h","c"],"mappings":"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","file":"../angular-asi-core-bundle.min.js","sourcesContent":["module app.core {\r\n    \"use strict\";\r\n    export class AngularGlobals {\r\n        public static appCore: string = \"app.core\";\r\n        public static appCoreConstants: string = \"app.core.Constants\";\r\n        public static $HTTP: string = \"$http\";\r\n        public static $STATEPARAMS: string  = \"$stateParams\";\r\n        public static $STATEPROVIDER: string = \"$stateProvider\";\r\n        public static $INJECTOR: string = \"$injector\";\r\n    }\r\n} ","((): void=> {\r\n    \"use strict\";\r\n    // declare core module and pass in core angular dependencies\r\n    angular\r\n        .module(\"app\", [\r\n        \"app.core\"\r\n        ])\r\n        .config([\"$httpProvider\", function ($httpProvider) {\r\n        $httpProvider.defaults.transformResponse.push(function (responseData) {\r\n            convertDateStringsToDates(responseData);\r\n            return responseData;\r\n        });\r\n    }]);\r\n\r\n    // Bootstrap our application to the entire document, we manually boostrap so\r\n    // our other child .module.ts files can add themselves as required modules to \"app\"\r\n    // as and when they load.\r\n    angular.element(document).ready(() => {\r\n        angular.bootstrap(document, ['app']);\r\n    });\r\n\r\n    //TODO - PMB - Find a better place for this function to live, ti just makes this file really messy\r\n    //http://aboutcode.net/2013/07/27/json-date-parsing-angularjs.html\r\n    var regexIso8601 = /^(\\d{4}|\\+\\d{6})(?:-(\\d{2})(?:-(\\d{2})(?:T(\\d{2}):(\\d{2}):(\\d{2})\\.(\\d{1,})(Z|([\\-+])(\\d{2}):(\\d{2}))?)?)?)?$/;\r\n\r\n    function convertDateStringsToDates(input) {\r\n        // Ignore things that aren't objects.\r\n        if (typeof input !== \"object\") return input;\r\n\r\n        for (var key in input) {\r\n            if (!input.hasOwnProperty(key)) continue;\r\n\r\n            var value = input[key];\r\n            var match;\r\n            // Check for string properties which look like dates.\r\n            if (typeof value === \"string\" && (match = value.match(regexIso8601))) {\r\n                var milliseconds = Date.parse(match[0]);\r\n                if (!isNaN(milliseconds)) {\r\n                    input[key] = new Date(milliseconds);\r\n                }\r\n            } else if (typeof value === \"object\") {\r\n                // Recurse into object\r\n                convertDateStringsToDates(value);\r\n            }\r\n        }\r\n    }\r\n\r\n})(); ","((): void=> {\r\n    \"use strict\";\r\n    // declare core module and pass in core angular dependencies\r\n    angular.module(app.core.AngularGlobals.appCore, [\r\n        \"ngSanitize\",\r\n        \"ui.router\",\r\n        \"ngLoadingSpinner\"\r\n    ]);\r\n})();","///<reference path=\"core.angularGlobals.ts\" />\r\n\r\nmodule app.core {\r\n    \"use strict\";\r\n\r\n    export interface IConstants {\r\n        baseUrl: string;\r\n        authToken: string;\r\n    }\r\n\r\n    var data = angular.element(document.querySelector(\"#__ClientContext\")).val();\r\n    var context: IConstants = angular.fromJson(data);\r\n\r\n    //Auth token is stored in the page in another field\r\n    context.authToken = angular.element(document.querySelector(\"#__RequestVerificationToken\")).val();\r\n\r\n    angular.module(AngularGlobals.appCore)\r\n        .constant(AngularGlobals.appCoreConstants, context);\r\n\r\n}\r\n\r\n","//This service is used to swtich state/routing\r\n//We cant inject $state, it would cause a JSON circular reference error\r\nmodule app.core.routing {\r\n    'use strict';\r\n\r\n    export interface IStateService {\r\n        go(to: string, params?: {}): void;\r\n    }\r\n\r\n    export class StateService implements IStateService {\r\n        public static id: string = AngularGlobals.appCore + \".StateService\";\r\n\r\n        constructor(private $injector: angular.auto.IInjectorService) {\r\n\r\n        }\r\n\r\n        go(to: string, params?: {}): void {\r\n            var state = <ng.ui.IStateService>this.$injector.get(\"$state\");\r\n            state.go(to, params);\r\n        }\r\n\r\n        public static injection(): any[] {\r\n            return [AngularGlobals.$INJECTOR,\r\n                (i) => new StateService(i)];\r\n        }\r\n    }\r\n\r\n    // register service with main module\r\n    angular\r\n        .module(AngularGlobals.appCore)\r\n        .factory(StateService.id, StateService.injection());\r\n} ","module app.core {\r\n    'use strict';\r\n\r\n    export interface IIPartSettingsService {\r\n        getSettings(contentKey: string, contentItemKey: string): ng.IHttpPromise<TemplateStringsArray>;\r\n    }\r\n\r\n// ReSharper disable once InconsistentNaming\r\n    export class IPartSettingsService {\r\n        public static id: string = AngularGlobals.appCore + \".IPartSettingsService\";\r\n        baseUrl: string;\r\n        authToken: string;\r\n\r\n        constructor(\r\n            private $http: ng.IHttpService,\r\n            clientContext: core.IConstants) {\r\n\r\n            this.baseUrl = clientContext.baseUrl;\r\n            this.authToken = clientContext.authToken;\r\n        }\r\n\r\n        //Get the published iPart settings for the given contentItem (iPart) on the content.\r\n        public getSettings(contentKey: string, contentItemKey: string): ng.IHttpPromiseCallbackArg<TemplateStringsArray> {\r\n            return this.$http.get(this.baseUrl + \"api/ContentTypeSettings\",\r\n            {\r\n                params: { contentKey: contentKey, contentItemKey: contentItemKey },\r\n                headers: { 'RequestVerificationToken': this.authToken }\r\n                }).then((response: ng.IHttpPromiseCallbackArg<TemplateStringsArray>): TemplateStringsArray => {\r\n                    if (response.data)\r\n                        return response.data;\r\n                    return response.data;\r\n            });\r\n        }\r\n\r\n        public static injection(): any[] {\r\n            return [core.AngularGlobals.$HTTP, core.AngularGlobals.appCoreConstants,\r\n                (h, c) => new IPartSettingsService(h, c)];\r\n        }\r\n\r\n    }\r\n\r\n    // register service with main module\r\n    angular\r\n        .module(AngularGlobals.appCore)\r\n        .factory(IPartSettingsService.id, IPartSettingsService.injection());\r\n} "]}